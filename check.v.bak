`define TimeExpire 32'd25000000
`define btnCheckExpire 32'd12500000 //check per 0.5s
module check(clk, rst, btn1, btn2, btn3, data, score);
	input clk, rst, btn1, btn2, btn3;
	reg clk_2Hz; //should be input, but for test first.
	input [2:0] data;
	reg btn1_check, btn2_check, btn3_check;
	reg output [3:0] score = 4'd0;

	btn_control btn1_control(clk,rst,btn1,btn1_check); //btn1_check
	btn_control btn2_control(clk,rst,btn2,btn2_check); //btn2_check
	btn_control btn3_control(clk,rst,btn3,btn3_check); //btn3_check

	// div_clk
	reg [31:0] cnt_2Hz;
	always@(posedge clk or negedge rst) begin
		if (~rst) begin
			cnt_2Hz <= 32'd0;
			clk_2Hz <= 1'd0;
		end
		else begin
			if (cnt_2Hz == btnCheckExpire) begin
				clk_2Hz <= ~clk_2Hz;
				cnt_2Hz <= 32'd0;
			end
			else begin
				cnt_2Hz <= cnt_2Hz + 32'd1;
			end	
		end
	end

	//check
	always@(posedge clk_2Hz or negedge rst) begin
		if (~rst) score <= 4'd0;
		else begin
			if (data[2]==1'd1 )
		end
	end


endmodule

module btn_control(clk, rst, btn_signal, btn_check);
	input clk, rst, btn_signal;
	output reg btn_check;

	reg [31:0] cnt;

	always@(posedge clk or negedge rst)
	begin
		if (~rst) begin
			btn_check <= 1'b0;
			cnt <= 32'd0;
		end
		else begin
			if (cnt == btnCheckExpire) begin
				move <= 1'b0;
				cnt <= 25'd0;
			end
			else if(cnt[7:0] == 8'd0) begin //check per 256 clocks
				move <= (!btn_signal)? 1'b1 : btn_check;
				cnt <= cnt + 32'b1;
			end
			else begin
				cnt <= cnt + 32'b1;
			end
		end
	end
endmodule